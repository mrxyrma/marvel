{"ast":null,"code":"var _jsxFileName = \"/Users/andrey/Desktop/111/react/marvel/src/components/charList/CharList.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './charList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CharList({\n  onCharSelected\n}) {\n  _s();\n\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n  const {\n    loading,\n    error,\n    getAllCharacters\n  } = useMarvelService();\n  useEffect(() => {\n    onRequest();\n  }, []);\n\n  const onRequest = offset => {\n    setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = newCharList => {\n    let ended = false;\n\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList(charList => [...charList, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset(offset => offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = id => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  };\n\n  const renderItems = arr => {\n    const items = arr.map((item, i) => {\n      let imgStyle = {\n        'objectFit': 'cover'\n      };\n\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {\n          'objectFit': 'unset'\n        };\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"char__item\",\n        tabIndex: 0,\n        ref: el => itemRefs.current[i] = el,\n        onClick: () => {\n          onCharSelected(item.id);\n          focusOnItem(i);\n        },\n        onKeyPress: e => {\n          if (e.key === '' || e.key === 'Enter') {\n            onCharSelected(item.id);\n            focusOnItem(i);\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.thumbnail,\n          alt: item.name,\n          style: imgStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__name\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__grid\",\n      children: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  };\n\n  const items = renderItems(charList);\n  const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 29\n  }, this) : null;\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 32\n  }, this) : null;\n  const content = !(loading || error) ? items : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"char__list\",\n    children: [spinner, errorMessage, content, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button__main button__long\",\n      disabled: newItemLoading,\n      style: {\n        'display': charEnded ? 'none' : 'block'\n      },\n      onClick: () => onRequest(offset),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: \"load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CharList, \"HpVx0KVk6dCvMevWoOlsw1EGqYE=\", false, function () {\n  return [useMarvelService];\n});\n\n_c = CharList;\nexport default CharList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CharList\");","map":{"version":3,"sources":["/Users/andrey/Desktop/111/react/marvel/src/components/charList/CharList.js"],"names":["useState","useEffect","useRef","useMarvelService","Spinner","ErrorMessage","CharList","onCharSelected","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","loading","error","getAllCharacters","onRequest","then","onCharListLoaded","newCharList","ended","length","itemRefs","focusOnItem","id","current","forEach","item","classList","remove","add","focus","renderItems","arr","items","map","i","imgStyle","thumbnail","el","e","key","name","spinner","errorMessage","content"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nfunction CharList({onCharSelected}) {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n  \n  const {loading, error, getAllCharacters} = useMarvelService();\n\n  useEffect(() => {\n    onRequest();\n  }, []);\n\n  const onRequest = (offset) => {\n    setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n  }\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if(newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList(charList => [...charList, ...newCharList])\n    setNewItemLoading(false)\n    setOffset(offset => offset + 9)\n    setCharEnded(ended)\n  }\n\n  const itemRefs = useRef([])\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'))\n    itemRefs.current[id].classList.add('char__item_selected')\n    itemRefs.current[id].focus()\n  }\n\n  const renderItems = (arr) => {\n    const items = arr.map((item, i) => {\n      let imgStyle = {'objectFit': 'cover'};\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'unset'};\n      }\n\n      return(\n        <li \n          className=\"char__item\"\n          tabIndex={0}\n          ref={el => itemRefs.current[i] = el}\n          key={item.id}\n          onClick={() => {\n            onCharSelected(item.id)\n            focusOnItem(i)}\n          }\n          onKeyPress={e => {\n            if (e.key === '' || e.key === 'Enter') {\n              onCharSelected(item.id)\n              focusOnItem(i)\n            }\n          }}>\n            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n            <div className=\"char__name\">{item.name}</div>\n        </li>\n      )\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        {items}\n      </ul>\n    )\n  }\n\n  const items = renderItems(charList);\n\n  const spinner = loading ? <Spinner /> : null;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const content = !(loading || error) ? items : null;\n\n  return (\n    <div className=\"char__list\">\n      {spinner}\n      {errorMessage}\n      {content}\n      <button \n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{'display': charEnded ? 'none' : 'block'}}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  )\n}\n\nexport default CharList;"]},"metadata":{},"sourceType":"module"}