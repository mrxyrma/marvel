{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n\nfunction useHttp() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {\n    'Content-Type': 'application/json'\n  }) => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n}\n\n_s(useHttp, \"wBqGcGl6EafFNGt940fH8x5vtvA=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/andrey/Desktop/111/react/marvel/src/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","response","fetch","ok","Error","status","data","json","e","message","clearError"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACjB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,OAAO,GAAGN,WAAW,CAAC,OAAOO,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG;AAAC,oBAAgB;AAAjB,GAAnD,KAA4F;AACtHP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAN,CAA5B;;AACA,UAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAW,mBAAkBP,GAAI,aAAYI,QAAQ,CAACI,MAAO,EAA7D,CAAN;AACD;;AACD,YAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;AACAd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOa,IAAP;AACD,KARD,CAQE,OAAME,CAAN,EAAS;AACPf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACa,CAAC,CAACC,OAAH,CAAR;AACA,YAAMD,CAAN;AACH;AACF,GAf0B,EAexB,EAfwB,CAA3B;AAiBA,QAAME,UAAU,GAAGpB,WAAW,CAAC,MAAMK,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAA9B;AAEA,SAAO;AAACH,IAAAA,OAAD;AAAUI,IAAAA,OAAV;AAAmBF,IAAAA,KAAnB;AAA0BgB,IAAAA;AAA1B,GAAP;AACD;;GAxBQnB,O;;AA0BT,eAAeA,OAAf","sourcesContent":["import { useState, useCallback } from \"react\";\n\nfunction useHttp() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n    setLoading(true)\n    try {\n      const response = await fetch(url, {method, body, headers});\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n      }\n      const data = await response.json()\n      setLoading(false)\n      return data\n    } catch(e) {\n        setLoading(false)\n        setError(e.message)\n        throw e\n    }\n  }, [])\n\n  const clearError = useCallback(() => setError(null), [])\n\n  return {loading, request, error, clearError}\n}\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}